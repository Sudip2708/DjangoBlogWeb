1) Přetažení html do Django
###
• Založit GitHub Repository
• Natáhnout do PyCharm
• Jít na: https://bootstrapious.com/free-templates
• Vybrat podklad a stáhnout do kompu
(v mém případě: https://bootstrapious.com/p/bootstrap-blog)
• Překopírovat složky ze zipu do kořenového adresáře
###
Pokud mám špatné venv:
Deaktivace: $ deactivate
Instalace virtualenv: $ pip install virtualenv
Vytvoření venv: $ virtualenv venv
Aktivace venv: $ venv\Scripts\activate
###
• Aktualizace pip: $ python -m pip install --upgrade pip
• Instalace Django: $ pip install django
• Založit projekt: $ django-admin startproject blog
###
• Uvnitř kořenové složky 'blog' vytvořit složku 'static'
• Přesunout dovnitř: složky: css, img, js, vendor, a případně další statiku (fonts, icons)
• Uvnitř kořenové složky 'blog' vytvořit složku 'templates'
• Přesunout dovnitř html a textové soubory (zbylé z webové šablony)
###
• Ve složce projektu 'blog' otevřít settings.py
• Nastavit cestu k složce templates: TEMPLATES... 'DIRS': [BASE_DIR / 'templates']
• Dopsat pod statiku odkazy na: MEDIA_URL, STATICFILES_DIRS, STATIC_ROOT, MEDIA_ROOT
• Ve složce projektu 'blog' otevřít urls.py
• Importovat settings a static: from django.conf import settings, from django.conf.urls.static import static
• Zapsat kód pro zpřístupnění media a statiky z webu (když jsme v debug módu): if settings.DEBUG:...
• V terminálu se přesunout do aplikace: $ cd blog
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
###
Úprava html souborů:
• vytvořit base.html, pro základní strukturu
• rozebrat index.html na základní společné prvky: head.html, header.html, footer.html, scripts.html
• Smazat hlavičku a skripty i na dalších stránkách (blog.html, post.html)
• Dopast do stránek {% block content %} a {% endblock content %}
###
• Ve složce projektu 'blog' vytvořit soubor views.py a definovat pohled index a blog
• Ve složce projektu 'blog' otevřít urls.py a importovat vytvořené pohledy: from.views import index, blog
• Zapsat pohledy do urlpatterns
• Zpustit vývojové prostředí a podívat se zda se načetl nestylizovaný obsah webu: $ python manage.py runserver
###
• Otevřít soubor head.html, scripts.html, index.html, blog.html, post.html a na úvod dopsat: {% load static %}
• V souborech head.html a scripts.html, ke každému lokálnímu odkazu herf do uvozovek dopsat {% static '' %} a do apostrofů dát původní obsah
• To samé udělat pro všechny obrázky (src="img) v souborech index.html, blog.html, post.html.
• V settings.py zkontrolovat a případně přepsat následujíc: STATICFILES_DIRS = [BASE_DIR / 'static'], STATIC_ROOT = BASE_DIR.parent / 'static'
• Zpustit příkaz: $ python manage.py collectstatic
• Zpustit vývojový server
• Na stránce přepnout do konzole a zkontrolovat zda tu nejsou nějaké nenačtené soubory
###
2) Zprovoznění index.html
###
• Otevřít header.html a opravit odkazy v navigaci stránky (např. href="blog.html" na href="/blog")
• Vytvořit nový modul pro příspěvky post: $ python manage.py startapp posts
• Podívat se na stránku a zjistit, co vše budeme potřebovat za pole pro databázy
• Otevřít blog/settings.py a zapsat do INSTALLED_APPS 'posts',
###
• Nainstalovat Pillow pro práci s obrázky: $ pip install pillow
• Nainstalovat knihovna TinyMCE pro práci s obsahem webu: $ pip install django-tinymce
• Do blog/settings.py a zapsat do INSTALLED_APPS 'tinymce',
• Do posts/models.py importovat HTMLField, get_user_model a zapsat databázové modely:
• Post(models.Model) pro příspěvky - pole: title, overview, timestamp, comment_count, author (ForeignKey)
• Author(models.Model) pro autora příspěvků - pole: user, profile_picture
• Category(models.Model) pro kategorie příspěvků - pole: title
Vytvoření souboru s instalovanými balíčky: $ pip freeze > requirements.txt
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
###
• Z blog/views.py překopírovat obast do posts/views.py a blog/views.py smazat
• V blog/urls.py přepsat from .views na from posts.views
+ Dopsání popisků
###
• V posts/models dopsat do Post(models.Model) pro příspěvky - pole: featured (pro učení příspěvku pro hlavní stránku)
• Natsavit defaoultní hodnotu na False: featured = models.BooleanField(default=False)
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
• Vytvoření superuser: $ python manage.py createsuperuser
• V posts/admin.py importovat a registrovat zobrazení vytvořených tabulek: admin.site.register()
• Přihlásit se na http://127.0.0.1:8000/admin/ a zapsat pár příspěvků
###
• Do posts/views.py importovat třídu Post: from .models import Post
• Vyfiltrovat příspěvky s které mají pole featured nastaveno na True: article_featured = Post.objects.filter(featured=True)
• Vyfiltrovat nejnovější příspěvky: article_latest = Post.objects.order_by('-timestamp')[0:3]
• Vytvořit slovník context a přidat výsledky obou filtrování
• Zapsat vyfiltrovaná data do HTML odpovědi: return render(request, 'index.html', context)
• Otevřít templates/index.html, najít část se zobrazenými články a namísto opakování HTML kódu napsata jinja2 příkazy pro zobrazení dat.
###
• Vytvoření modulu pro zadání emailu pro odebírání novinek:
• Vtvořit novou aplikaci pro uchovávání emailů: $ python manage.py startapp marketing
• Do blog/settings.py a zapsat do INSTALLED_APPS 'marketing',
• Otevřít marketing/models.py a vytvořit tabulku Signup(models.Model) se sloupci: email, timestamp
• Otevřít marketing/admin.py a registrovat zobrazení vytvořených tabulek v admin sekci
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
• Otevřít posts/views a importovat Signup: from marketing.models import Signup
• A do index dopsat podmínku pro požadavek typu POST (if request.method == "POST") a příslušný kód pro uložení emailu
• Otevřít templates/index.html, najít část z formulářem pro přihlášení se k odběru
• Příkaz <form action="#">, přepsat na <form action="." method="POST">
• A pod něj vložit token: {% csrf_token %}
###
• Vytvoření kódu pro stránku blog se všemi příspěvky
• Otevřít post/views.py a k definici def blog(request) připsat:
• Kód pro vyfiltrování všech příspěvků: articles = Post.objects.filter()
• A přidat ho do slovníku context a ten vložit do rendru stránky
• Otevřít templates/blog.html a sekci se články přepsat do jednoho v jinja2 kódu
###
• Paginace:
• Otevřít post/views.py a zapsat import: from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
• Zapsat kód pro stránkování
• Otevřít templates/blog.html a zapsat jinja2 kód pro stránkování
###
Boční panel - nejnovější příspěvky
• V templates vytvořit nový soubor sidebar.html
• Otevřít templates/blog.html a překopírovat do templates/sidebar.html část kódu pro boční panel <aside>
• V templates/blog.html dopsat jinja2 odkaz na natežení obsahu z templates/sidebar.html {% include 'sidebar.html' %}
• Otevřít post/views.py a k definici def blog(request) připsat:
• Kód pro vyfiltrování kategorií: get_category_count()
• Kód pro vyfiltrování nejnovějších příspěvků: Post.objects.order_by('-timestamp')[:3]
• Přidat obě položky do slovníku context, vloženého do rendru stránky
• Otevřít blog/urls.py a do urlpatterns dopsat k položkám blog a post hodnotu name: name='post-list', name='post-detail'
• Otevřít posts/views.py a importovat reverse: from django.urls import reverse
• Dopsat funkci pro získání URL adresy: get_absolute_url(self) == return reverse('post-detail', kwargs={'pk': self.pk})
###
Boční panel - kategorie
• Otevřít posts/views.py a vytvoříme funkci get_category_count()
• Vytvoříme dotaz, pro vytažení všech kategorií a jejich zpočítání: queryset = Post.objects.values('categories__title').annotate(Count('categories__title'))
• Do def blog(request) dopíšeme category_count = get_category_count() a přidáme do context
• V templates/sidebar.html přepíšeme kód (za pomoci jinja2) aby použil dodané hodnoty
###
Boční panel - hledání (pouze v nadpisech a popisu článků)
• Vytvořit v templates soubor search_result.html + zapsat kód
• Otevřít posts/views.py a vytvoříme pohled pro výsledky hledání:  def search(request)
• Zapsat kód pro vyfiltrování obsahu dle zadaného textu
• Otevřít blog/urls.py importovat search, a do urlpatterns připsat path('search/', search, name='search'),
• Otevřít templates/sidebar.html a přepsat kód, a do form přidat action="{% url 'search' %}"
###
Pole s tagy budu dělat až nakonec (nebyli součástí tutotiálu)
###
Stránka s příspěvkem
• Otevřít templates/post.html odstranit část s bočním panelem a připsat: a přepsat kód
{% include 'sidebar.html' with most_recent_articles=most_recent_articles category_count=category_count %}
• Odebereme i část kódu pro vykreslení těla příspěvku (tato část je zde jen na ukázku, vzhled článku bude přes TinyMCE)
(
• Instalace TinyMCE: $ pip install django-tinymce
• Přidat tinymce do INSTALLED_APPS v settings.py: 'tinymce'
• A přepsat kód pro nastavení dle: https://django-tinymce.readthedocs.io/en/latest/installation.html
• Do blog/urls.py inportovat include a do urlpatterns: path('tinymce/', include('tinymce.urls')),
• Do posts/models.py importovat HTMLField: from tinymce.models import HTMLField
• A pole contens (pro obsah článku) nastavit na HTMLField()
• Ve složce posts vytvořit nový soubor forms.py a zapsat kód pro formulář
)
Otevřeme posts/views importoujeme get_object_or_404
A dopíšeme kód do post(request, id) pro vyhledání příspěvku: post = get_object_or_404(Post, id=id) a zapíšeme do rendru stránky.
Otevřeme templates/post.html a přepíšeme část s článkem za pomoci jinja2 kódu
###
Předešlý a další článek:
• Otevřít posts/model.py a dopsat pole i s definicí pro previous_post a next_post
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
• Otevřít web v admin sekci a přidat k článkům odkaz na předchozí a minulý
• Otevřít templates/post.html a přepsat kód pro předcházející a následující článek.
###
Komentáře:
• Otevřít posts/models.py a zapsat třídu pro tabulku pro příspěvky Comment(models.Model) s poly: user(fk), post(fk), timestamp, content
• Otevřít posts/admin.py a importovat třídu Comment a zaregistrovat: admin.site.register(Comment)
• Otevřít posts/forms.py a importovat třídu Comment a napsat model pro formulář
• Otevřít posts/views.py a importovat třídu CommentForm a zapsat kód
• Otevřít templates/post.html a přepsat kód pro komentáře
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
###
Zprovoznění vyhledávání
• Otevřít templates/header.html a z templates/sidebar.html překopírovat části kódu pro vyhledávání
###
Přidání a úprava příspěvku
• Otevřít templates/post.html a připsat odkazy pro zobrazení tlačítka pro úpravu a smazání článku
• Otevřít posts/models.py a do Post(models.Model) přidat funkci pro vytvoření, úpravu a smazání příspěvku
• Otevřít posts/views.py importovat PostForm a Author, a zapsat kód pro tyto pohledy
• Otevřít blog/urls.py importovat tyto pohledy a dopsat do urlpatterns cestu k nim
• Instalovat crispy-forms: $ pip install django-crispy-forms (https://django-crispy-forms.readthedocs.io/en/latest/install.html)
• Instalovat podporu pro Bootstrap 5: $ pip install crispy-bootstrap5 (https://github.com/django-crispy-forms/crispy-bootstrap5)
• Otevřít blog/settings.py a do INSTALLED_APPS zapsat: 'crispy_forms' a 'crispy_bootstrap5'
• A pod INSTALLED_APPS zapsat: CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5", CRISPY_TEMPLATE_PACK = "bootstrap5"
• V složce templates vytvožit soubory: post_create.html a zapsat kód
• Otevřít templates/post.html a připsat odkazy pro zobrazení odkazu pro úpravu článku
> dodělat mazání příspěvku < (s potvrzením)
###
Nastavení počítání zobrazení a počítání komentů
• Otevřít posts/models.py a zapsat třídy PostView(models.Model)
• A do Post(models.Model)) připsat @property: def view_count(self) a comment_count(self)
• Otevřít posts/views.py importovat PostView
• A do post() připsat PostView.objects.get_or_create(user=request.user, post=post)
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
• Otevřít posts/admin.py a importovat třídu PostView a zaregistrovat ji
Otevřít index.html, blog.html, post.html, sidebar.html a dopsat {{ post.comment_count }} a {{ post.view_count }}
> Změna 'article' na 'post' pro zjednodušení kódu <
###
Změna virtuálního prostředí
• (Nějak se mi na projek v počátku navázalo virtuální prostředí z jiného projektu a ny ní našel čas to napravit)
• Deaktivovat virtuální prostředí: $ deactivate
• Aktivace venv které jsem si vytvořil a v kterém dělám projekt: $ venv\Scripts\activate
• Natažení requirements.txt: $ pip freeze requirements.txt
• Vypnout / zapnout PyCharm
• Jít v PyCharm do File > Settings > Projekt > Projekt interpreter a vytvořit (přidat) nový interpreter
• Doinstalovat requirements.txt: $ pip install -r requirements.txt
###
Instalace a základní nastavení Django Allauth (bez možnosti přihlášení prostřednictvím sociálních sítí)
• Nainstalovat aplikaci: $ pip install django-allauth
• Zápis instalace do requirements.txt: $ pip freeze requirements.txt
• Otevřít blog/settings.py a do INSTALLED_APPS přidat: 'allauth', 'allauth.account'
• Zkontrolovat jestli v TEMPLATES je uvedeno: 'django.template.context_processors.request'
• Přidat nastavení AUTHENTICATION_BACKENDS
• Do MIDDLEWARE přidat řádek: "allauth.account.middleware.AccountMiddleware",
• Otevřít blog/urls.py a do urlpatterns připsat: path('accounts/', include('allauth.urls')),
• Migrovat projekt: $ python manage.py migrate
###
Toto jsou nové urls, které jsme tím získali:
accounts/ signup/ [name='account_signup']
accounts/ login/ [name='account_login']
accounts/ logout/ [name='account_logout']
accounts/ reauthenticate/ [name='account_reauthenticate']
accounts/ password/change/ [name='account_change_password']
accounts/ password/set/ [name='account_set_password']
accounts/ inactive/ [name='account_inactive']
accounts/ email/ [name='account_email']
accounts/ confirm-email/ [name='account_email_verification_sent']
accounts/ ^confirm-email/(?P<key>[-:\w]+)/$ [name='account_confirm_email']
accounts/ password/reset/ [name='account_reset_password']
accounts/ password/reset/done/ [name='account_reset_password_done']
accounts/ ^password/reset/key/(?P<uidb36>[0-9A-Za-z]+)-(?P<key>.+)/$ [name='account_reset_password_from_key']
accounts/ password/reset/key/done/ [name='account_reset_password_from_key_done']
###
Restrukturizace projektu
1) Změna názvů souborů py
2) Změna názvů souborů html
3) Změna modulu posts na articles + oprava v kódu
4) Smazání databáze
5) Smazání všech migrací
6) Vytvořit nové migrace
###
Přidání automaticky generovaného obsahu pro pole slug:
• Instalace django-autoslug: $ pip install django-autoslug
• Přidání do INSTALLED_APPS: 'autoslug'
• Import AutoSlugField v modelu: from autoslug import AutoSlugField
• Použití AutoSlugField v modelu: slug = AutoSlugField(populate_from='title', unique=True)
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
###
• Přidání kódu do articles/admin.py pro zobrazení polí v tabulce
Vytvoření kanonické adresy:
• Změnit v articles/urls.py v path <int:id> na <slug:slug>
• Změnit výskyt všech pk na slug
###
Vytvoření kanonické adresy:
• Změnit v articles/urls.py v path <int:id> na <slug:slug>
• Změnit výskyt všech pk na slug
Přidání tagování:
• Instalace django-taggit: $ pip install django-taggit
• Otevřít main/settings.py a do INSTALLED_APPS přidat 'taggit'
• Otevřít articles/models/article.py a importovat taggit: from taggit.managers import TaggableManager
• A do Article(models.Model) přidat nové pole: tags = TaggableManager()
• A do Article(models.Model) přidat pro získání tagů k příspěvku: @property, def get_tags(self): return self.tags.all()
• Otevřít templates/article-tags a zapsat kód pro zobrazení tagů
• $ python manage.py makemigrations
• $ python manage.py migrate
Zobrazení tagů v postranním panelu:
• Otevřít articles/views/article-list.py a articles/views/article-detail.py a do oubou importovat tagit: from taggit.models import Tag
• A do kontextu připsat: context['tags'] = Tag.objects.all()
• Otevřít templates/sidebar_tags a zapsat kód pro zobrazení všech tagů
###
Přidání zobrazení výsledků vyhledávání do stránky se všemi články.
Vyčištění a unifikace kódu + Přidání popisů
###
Přepis pole pro počítání počtu komentářů na @property v Article(models.Model)
• Smazat řádek s polem comment_count = models.PositiveIntegerField(default=0)
• Přidat @property s definicí funkce: return self.comments.count()
• $ python manage.py makemigrations
• $ python manage.py migrate
• V modelu pro komentáře odstranit připočítávání komentářů def save(self, *args, **kwargs)
• Ke šablonám k zobrazení připsat podmínku: {% if article.comment_count %}
###
Přihlášení prostřednictvím Google
• Do main/urls.py přidat cestu: path('accounts/', include('allauth.urls')), a path('accounts/', include('allauth.socialaccount.urls')),,
• V templates vytvořit adresář allauth a překopírovat do něj soubory z adresáře templates AllAuth pro pozdější úpravu
• Nastavit přihlášení přes google: https://medium.com/powered-by-django/add-social-authentication-django-allauth-google-oauth-example-d8d69a603356
###
Script pro atumatické odkliknutí potvrzení přihlášení přes google
• Ze složky templates/socialaccount ve virtuálním prostředí Allauth překopírovat souborlogin.html do stejné adresářové struktury v templates
• Přepsat kód plus přidat script.
• Aby nedocházelo ke změně okna, přidat tuto stránku ke stránce login.html v mém projektu: {% extends 'account/login.html' %}
• Překopírovat kód odebrat co není potřeba , přidat skryté tlačítko a script, který ho zmáčkne.
###
Vytvoření stránku pro zobrazení a úpravů informací o uživatelovi
• V users vytvožit složku pro forms, models, views a smazat soubory stejného jména
• V users/models vytvořit user_profile_model.py a zapsat kód
• V users/models vytvořit signals.py a zapsat kód pro připojení k User
• $ pip install Pillow
• $ python manage.py makemigrations
• $ python manage.py migrate
• V users/apps.py dopsat kód upozorňující na signals def ready(self): import users.models.signals
• V users/__init__.py dopsat řádek upozorňující na kód v apps.py default_app_config = 'users.apps.UsersConfig'
• V users/forms vytvořit user_update_form.py a zapsat kód pro získání formulářeových dat pro User
• V users/forms vytvořit profile_update_form.py a zapsat kód pro získání formulářeových dat pro UserProfile
• V users/views vytvořit profile_update_view.py a zapsat kód pro pohled pro stránku s údaji o uživateli
• V templates vytvořit soubor profile_update.html a zapsat kód pro stránku s údaji o uživateli
• V templates vytvořit soubor user_sidebar.html a zapsat kód pro boční panel por stránku s údaji o uživateli a pžipojit ho k ní
• V templates/02_base_header.html připsat stránku do navigace
###
Přebudování celého projektu tak, abych pro uživatele mohl použít třídu CustomUser(AbstractUser) namísto modelu pro profil
Vytvoření CustomUser(AbstractUser):
$ pip install Django
$ django-admin startproject main
$ cd main
$ python manage.py startapp users
• main/settings.py > INSTALLED_APPS > + "users",
• users/ > + managers.py
• users/managers.py > zapsat kód pro vlastního správce (podtřídou BaseUserManager), který místo uživatelského jména používá jako jedinečný identifikátor e-mail
• users/models.py > zapsat kód pro CustomUser(AbstractUser) + přidat metodu pro automatické vytváření username
• users/ > + signals.py > zapsat kód pro automatické přidělení defaultního profilového obrázku
• main/settings.py > přidat kód AUTH_USER_MODEL = "users.CustomUser" , aby Django vědělo, že má použít novou vlastní třídu uživatelů
$ pip install Pillow
$ python manage.py makemigrations
$ python manage.py migrate
$ python manage.py createsuperuser
• users/admin.py > odregistrovat Groups: admin.site.unregister(Group) /pokud nechci využívat nastavení práv jednotlivým skupinám/
• users/admin.py > zaregistrovat CustomUser: @admin.register(CustomUser)
$ python manage.py runserver
Napojení stávajícího projektu:
$ python manage.py startapp articles
• articles/ > vytvořit složky: forms, models, views a překopírovat do nich obsah
• articles/ > smazat soubory models.py a views.py
• root/ > překopírovat složky media, static, templates
• root/ > překopírovat soubor requirements.txt
• main/settings.py > dopsat chybějící části kódu
• main/urls.py > dopsat chybějící části kódu
$ pip install -r requirements.txt
$ python manage.py makemigrations
$ python manage.py migrate
$ python manage.py collectstatic
$ python manage.py runserver
###
Nahrazení signálů metodou save:
• articles/models/article_author.py > změna metody create_or_update_author na metodu save
• users/models.py > změna metody create_username_from_email na metodu save
$ python manage.py makemigrations
$ python manage.py migrate
$ python manage.py runserver
Oprava aby nový uživatel mohl psát článek - stát se uživatelem:
• articles/views/utils.py > změnit kód pro get_author tak aby při nenalezení autora vytvořil nového
Zobrazení možnosti změnit jméno autora a jeho profilovou fotku ve templates pro profile_update.html
• users/models.py > vytvoření @property pro získání hodnoty zda je uživatel také autor
• users/forms.py > vytvoření class AuthorProfileForm(forms.ModelForm) pro data autora
• users/views.py > přepsat kód tak aby přeposílal i data autora
• templates/profile_update.html > přepis kódu
• templates/user_sidebar.html > Zapsat kód pro boční panel v kterém se budou zobrazovat informace o autorovi
###
Automatická změna formátu, velikosti a jména nahrané profilové fotografie
$ pip install django-model-utils
• users/signals.py > zapsat kód pre_save pro hlídání změny profilového obrázku za využití tracker = FieldTracker(instance)
• users/models.py > do metody save() dopsat kód pro vytvoření profilového obrázku v případě založení účtu.
###
Přenesení logiky ze signálů do views
• users/utils/ > vytvořit create_username.py > přepsat kód z users/models.py pro vytvoření uživatelského jména
• users/utils/ > vytvořit create_profile_picture.py > přepsat kód z users/models.py pro vytvoření profilového obrázku
• users/models.py > Odebrat kód pro vytvořené utils a importovat kódy utils
• users/models.py > Importovat a zapsat tracker na profilový obrázek
• articles/models/article_author.py > Importovat a zapsat tracker na profilový obrázek
• articles/models/article_author.py > Připsat třídní metodu na zjištění autora pro uživatele user_is_author()
• users/utils/ > vytvořit get_author_form.py > přepsat kód z users/views.py pro získání formulářových dat autora
• users/utils/ > vytvořit prepare_profile_image.py > přepsat kód z users/views.py pro úpravu profilového obrázku
• users/views.py > Odebrat kód pro vytvořené utils a importovat kódy utils
• users/views.py > Přepsat kód aby kontroloval změnu profilových obrázků přes tracker
• users/signals.py > Smazání souboru
• users/__init__.py > Vymazat směrování na signál
• users/apps.py > Vymazat směrování na signál
###
Přepracování views + úprava nahraného profilového obrázku
• articles/models/article_author.py > Dočasně dopsány property pro definování cesty a názvu obrázku
• users/models.py > Dočasně dopsány property pro definování cesty a názvu obrázku
• users/ > vytvořit složku views > vložit prázdný __imit__.py
• users/views/ > vytvořit profile_update_user.py > přepsat z users/views.py kód pro uživatele
• users/views/ > vytvořit profile_update_autor.py > přepsat z users/views.py kód pro autora
• users/views.py > Smazat
• templates/ > vytvořit profile_update_user.html > přepsat z profile_update.html část pro uživatele
• templates/ > vytvořit profile_update_autor.html > přepsat z profile_update.html část pro autora
• templates/profile_update.html > upravit kód aby odpovídal změnám
• main/urls.py > smazat url pro profile_update.html a napsat url pro profile_update_user.html a profile_update_autor.html
• users/utils/ > vytvořit change_profile_picture.py > zapsat kod pro základní správu úpravy nahraného obrázku
• users/utils/ > vytvořit resize_and_jpg_format.py > zapsat část kódu pro změnu velikosti a formátu
• users/utils/ > vytvořit delete_old_image.py > zapsat část kódu pro smazání starého profilového obrázku
• users/utils/ > vytvořit rename_new_image.py > zapsat část kódu pro přejmenování nového obrázku
• users/utils/get_author_form.py > smazat
###
Oprava nenačítání custumuser a oprava načítání aktualizovaných profilových fotek:
• main/settings.py > Přenastavit AUTH_USER_MODEL na 'users.custom_user.CustomUser'
(takto nastavené mi nefungoval autor a tak vracím models.py na původní místo:)
• users/models/costum_user.py > přesunout do users/ a přejmenovat na models.py
• users/models/costum_user_manager.py > přejmenovat na manager.py
• users/models/utils/create_profile_pictur.py > přesunout do users/models/
• users/models/utils/soubor create_username.py > přesunout do users/models/
• users/models/utils/ > smazat
• users/models/ > přejmenovat na users/models_utils/
$ python manage.py makemigrations
$ python manage.py migrate
$ python manage.py runserver
• templates/ > prohledat temlates a u všech obrázků autora nebo uživatele přidat ?{% now 'U' %} pro časové razítko, tak aby prohlížeče vždy načítali aktuální fotku
(u obrázků pro články to nedělám protože se jednak moc nemění, ale hlavně jsou i velké, takže je dobré, aby se načítali s paměti prohlížeče)
###
Změna modelu articles pro hlavní obrázek
• articles/models/article.py > připsat pole pro různé varianty obrázků
• articles/models/article.py > připsat metody pro generování názvu obrázku pro low rozlišení
• articles/models/article.py > připsat metodu na smazání existujících variant obrázků při změně
• articles/models/article.py > připsat do save kod pro ukládaní obrázků
$ python manage.py makemigrations
$ python manage.py migrate
Přejmenování pole thumbnail na main_picture:
• articles/models/article.py > přepsat výskyty pole thumbnail na pole main_picture
• articles/forms/article_form.py > přepsat výskyty pole thumbnail na pole main_picture
$ python manage.py makemigrations
$ python manage.py migrate
• articles/models/article.py > smazat pole pro main_picture_medium
$ python manage.py makemigrations
$ python manage.py migrate
• articles/models/article.py > přidat do pole pro main_picture definici umístění: upload_to='articles/main_picture/
$ python manage.py makemigrations
$ python manage.py migrate
$ python manage.py runserver
###
Změna názvu pole pro profilový obrázek autora:
• articles/models/article_author.py > změnit article_profile_picture na profile_picture
• root > vyhledat article_profile_picture a změnit na profile_picture všechny výskyty (kromě v migraci)
$ python manage.py makemigrations
$ python manage.py migrate
Změna názvu pole pro profilový obrázek uživatele:
• users/models.py > změnit profile_image na profile_picture
• root > vyhledat profile_image a změnit na profile_picture všechny výskyty (kromě v migraci)
$ python manage.py makemigrations
$ python manage.py migrate
Zjednodušení procesů nahrátí nového profilového obrázku:
• articles/models/article_author.py > přidat třetí property pro cestu k profilovému obrázku
• users/models.py > přidat třetí property pro cestu k profilovému obrázku
• users/views > projí úpravu profilového obrázku a zjednodušit cestu
$ python manage.py runserver > ověřit zda je vše funkční
###
Restrukturalizace projektu - odstranění gallery skrze reinstalaci bez ní
• root > vytvoření složky utilities/ do které se přesunuly veškeré utility z celého projektu
• users/models_utils > smazání složky
• users/views/utils > smazání složky
• users/views > nahrazení metody na zpracování fotky z formuláře v obou sobourech
• users/models.py > přidání pole pro slug a miniatury a jejího vytvoření při změně profilového obrázku
• articles/models/article_author.py > přidání pole pro slug a miniatury a jejího vytvoření při změně profilového obrázku
• articles/models/article.py > přepsání kódu na automatické vytvoření a uložení různých verzí hlavního obrázku
• articles/forms/article_form.py > skrytí pole pro current i pole pro výběr obrázku
• templates/ > poupravení odkazů na obrázky + přidání časového razítka
###
Úprava stránky pro úpravu příspěvku
• templates/01_base_head.html > dopsat kód pro tinyMCE
• templates/01_base_scripts.html > dopsat kód pro tinyMCE
• templates/52... > dopsat kód šablony pro stránky pro úpravu příspěvku
• templates/53... > dopsat kód šablony pro stránky pro úpravu příspěvku
• articles/forms/article_form.py > dopsat kód pro tinyMCE
• articles/views/article_update.py > dopsat kód pro kontrolu, zda bylo zmáčknuté tlačítko pro uložení formuláře s návratem na stránku s úpravou
• templates/40.article.html > dopsat kód pro zobraztení overview
###
Úprava stránky pro vytvoření článku
• articles/models/artice.py > přepsat pole overview a content na null=True, blank=True
• articles/models/artice.py > připsat bolean pole public pro zaškrtávání možnosti, zda má být článek veřejně přístupný
• templates/ > přidat podmínku o zobrazení náhradního obrázku, když není žádný nahrán (pro vytvoření článku)
• articles/forms/article_form.py > Odstranit kod pro tinyMCE (již je implementovaný přes odkaz a script v hlavě a patičce html)
• articles/forms/article_form.py > Připsat kód pro popisný text pro pole (bez tohoto kroku, by pole s tinyMCE vyžadovalo být vyplněné)
• articles/views/article_create.py > Připsat podmínku pro zjištění, jaké odesílací tlačítko bylo použito
• templates/ > reorganizace souborů pro tvorbu a úpravů článků
(Je potřeba ještě dodělat, samostatné ukládání obrázku obsažených v html poli pro rychlejší načítání webu)
###
Tagy + Nastavení Contentu a tinyMCE
• articles/models/artice.py > přepsat pole overview a content na null=True, blank=True
• articles/models/artice.py > připsat bolean pole public pro zaškrtávání možnosti, zda má být článek veřejně přístupný
• templates/ > přidat podmínku o zobrazení náhradního obrázku, když není žádný nahrán (pro vytvoření článku)
• articles/forms/article_form.py > Odstranit kod pro tinyMCE (již je implementovaný přes odkaz a script v hlavě a patičce html)
• articles/forms/article_form.py > Připsat kód pro popisný text pro pole (bez tohoto kroku, by pole s tinyMCE vyžadovalo být vyplněné)
• articles/views/article_create.py > Připsat podmínku pro zjištění, jaké odesílací tlačítko bylo použito
• templates/ > reorganizace souborů pro tvorbu a úpravů článků
(Je potřeba ještě dodělat, samostatné ukládání obrázku obsažených v html poli pro rychlejší načítání webu)
###
Tagy
$ pip install django-taggit
• INSTALLED_APPS > TAGGIT_CASE_INSENSITIVE = True
• templates/01_base_head.html > Dopsat kód pro link na CCS pro Bootstrap a Tagify
• templates/04_base_scripts.html > Dopsat skripty pro Bootstrap a Tagify
• templates/53_article_create_form_settings.html > Přepsat kód pro tagy
Použité nástroje:
Pro pole databáze: https://django-taggit.readthedocs.io/en/latest/#
Pro vykreslení na webu: https://github.com/yairEO/tagify
###
Úprava kategorií z ManyToManyField na ForeignKey:
• articles/models/article_category.py > přidání kódu pro defaultní hodnotu
• articles/models/article.py > přepsání kódu pro pole categories na category
• templates/ > přepsání výskytů v kódu
• articles/admin.py > přidání kódu pro zobrazení tagů a kategorií v sekci admin
• articles/migrations/ > smazání migrací
$ python manage.py makemigrations
$ python manage.py migrate
###
Úprava popisků k článku
• templates/53_article_create_form_overview.html > poupravit lables
• templates/53_article_create_form_settings.html > poupravit lables
articles/forms/article_form.py > poupravit placeholds
###
Ukládání nových a smazání starých tagů:
• utilities/for_articles/ > vytvořit soubor clean_tagify_input.py a zapsat kód pro očištění vstupních dat
• utilities/for_articles/ > vytvořit soubor check_and_delete_unused_tags.py a zapsat kód pro kontrolu a případné smazání odstraněných tagů
• articles/views/article_create.py > Připsat kód pro zachycení změny v poly tagů
• articles/views/article_update.py > Připsat kód pro zachycení změny v poly tagů
###
Navracení se na stejnou záložku v úpravě článku:
• articles/views/article_create.py > připsat kód pro zachycení fodnoty odesílacího tlačítka (submit_change_value)
• articles/views/article_update.py > připsat kód pro zachycení fodnoty odesílacího tlačítka (submit_change_value)
• templates/40_article.html > připsat do odkazu na úpravu článku hodnotu current_tab
• templates/53_article_create_form.html > přidat k tlačítkům hodnou current_tab
• templates/53_article_create_form_overview.html > přidat k tlačítkům hodnou current_tab
• templates/55_article_create_util_submit_buttons_both.html > přidat k tlačítkům hodnou current_tab
• templates/55_article_create_util_submit_for_editing.html > přidat k tlačítku value current_tab
• main/urls.py > do adresy pro úpravu článku přidat hodntu current_tab
• templates/04_base_scripts.html > Dopsat skripty pro automatické kliknutí na záložku (dle adresy) při návratu na stránku
• templates/04_base_scripts.html > Dopsat skripty pro změnu adresy při změně záložky
###
Změna zaškrtávacího pole Public na výběrové pole status
• articles/models/article.py > smazání kódu pro Public
• articles/migrations/0001_initial.py > smazání kódu pro Public
• articles/admin.py > smazání kódu pro Public
• articles/forms/article_form.py > smazání kódu pro Public
• templates/53_article_create_form_settings.html > smazání kódu pro Public
• articles/models/article.py > zapsání kodu pro status
$ python manage.py makemigrations
$ python manage.py migrate
• articles/admin.py > zapsání kodu pro status
• articles/forms/article_form.py > zapsání kodu pro status
• templates/53_article_create_form_settings.html > zapsání kodu pro status
###
Doupravení vzhledu stránek pro vytvoření a úpravu článku
###
Úprava postranního panelu
• users/models.py > připsat pole pro linked_author_id
$ python manage.py makemigrations
$ python manage.py migrate
• articles/models/article_author.py > připsat kód, kerý při založení instance zapíše id autora do pole v uživatelovi
• articles/models/article_author.py > připsat kód, kerý při smazání instance nastaví hodnotu None do pole v uživatele
• tempates/ > úprava kódu pro zobrazení postranního panelu
• main/urls.py > přidat cestu pro zobrazení článků daného autora
• articles/views/article_common_contex_mixin.py > importovat ArticleAuthor a připsat kód pro získání autora (je-li)
###
Dokončení úpravy vzhledu postranního panelu pro uživatele
• tempates/ > vytvořit soubor XX_sidebar_user.py a vložit kod pro postranní panel, když je pouze uživatel
• tempates/ > vytvořit soubor XX_sidebar_user_author.py a přidat kód, pro zobrazení, když uživatel, má i učet authora
• articles/views/article_common_contex_mixin.py > upravit kód pro získání dat autora
• users/views/profile_update_user.py > pozměnit kód pro získání dat autora
• tempates/ > připsat v šech šablonách pro postranní panely kód pro zobrazení panelu uživatele
###
Úprava stránek pro úpravu uživatelského účtu
• users/views/profile_update_user.py > odebrání author_form
• users/views/profile_update_author.py > přidání user_author pro sidebar
• tempates/ 60-63 - změna rozložení kodu v šablonách
###
• Restrukturizace html
• Úprava responzivního chování hlavního navigačního tlačítka.
• Úprava dropdown menu pro postraní panel uživatele
###
Vytvoření stránky pro mé články
• articles/views/ > vytvořit soubor my_articles.py a zapsat kod pro vygenerování obsahu pro články s ohledem na záložky stavu statusu
• tempates/31__page_title__.html > Připsat kod pro zobrazení pro my articles s navigací pro záložky dle kategorií
• main/urls.py > zapsat kód pro ardesu generovanou na základě my-articles/záložka
__author_dropdown_menu__.html > připsat do odkazu na stránku my-author záložku all
• articles/models/article.py > změna názvů položek v poli status
$ python manage.py makemigrations
$ python manage.py migrate
• databáze > přejmenování existujících hodnot pole status pro položky v databázy
• articles/views/home_page.py > přidání filtrace na články, které mají status publised
• articles/views/article_list.py > přidání filtrace na články, které mají status publised
###
###
Drobné úpravi postranního tlačítka a zobrazení jeho položek.
###
Zaznamenávání otevřených panelů
• users/models.py přidat boolean pole pro postranní panel uživatele: sidebar_user_user_menu a sidebar_user_author_menu
$ python manage.py makemigrations
$ python manage.py migrate
• users/views/ > vytvořit soubor update_menu_state.py a zapsat kod, který zpracovává požadavky zasnané přes script
• main/urls.py > zapsat novou adresu pro změnu hodnot update_menu_state
• templates/05__body_script__.html > připsat kod pro script, který zachytává tlačítka a odesílá POST do souboru ve views
• templates/2_main/_sidebar/_user/__user_dropdown_menu__.html > připsat podmínku pro zobrazení nabídky na základě pole v modelu
• templates/2_main/_sidebar/_user/__uauthor_dropdown_menu__.html > připsat podmínku pro zobrazení nabídky na základě pole v modelu
###
###
Otevírání a správa postraních panelů
• templates/2_main/____user__.html > přejmenovat na __user__.html a přesunout do templates/2_main/_sidebar/
• templates/__zbytek/S2a_sidebar_category.html > přejmenovat na __category__.html a přesunout do templates/2_main/_sidebar/ + dopsat kod pro rozbalovací nabídku
• templates/2_main/S2b_sidebar__search.html > přejmenovat na __search__.html a přesunout do templates/2_main/_sidebar/ + dopsat kod pro rozbalovací nabídku
• templates/2_main/S2s_sidebar__tags.html > přejmenovat na __tags__.html a přesunout do templates/2_main/_sidebar/ + dopsat kod pro rozbalovací nabídku
• utilities/for_user/ > vytvořit soubor ordered_boolean_field.py a zapsat kód pro bolean pole s hodnotou pořadí a metodami pro její změni
• users/models.py > importovat třídu pro nové pole a připsat kod pro pole user, category, tags, search
$ python manage.py makemigrations
$ python manage.py migrate
• users/views/update_menu_state.py > dopsat kod pro nová pole
• templates/2_main/_sidebars/ > vytvořit sloužku arrow a zapsat kody pro jednotlivé bootstrap ikony šipek a připsat šipky do kodu pro sidebary
• templates/2_main/_sidebars/ > vytvořit soubor __button_collapse__.html a zapsat jako šablonu pro tlačítka
• templates/2_main/21__sidebar__.html > připsat schovávací tlačítko pro celý sidebar
###
Skrývání bočního panelu
• users/models.py > připsat nové boolean pole pro sidebar
$ python manage.py makemigrations
$ python manage.py migrate
• templates/2_main/ > vytvořit soubor 21__sidebar_button__.html a vložit do něj kod pro tlačítko pro sidebar
• templates/2_main/21__sidebar__.html > odebrat schovávací tlačítko pro celý sidebar
• templates/0_base/_header/02__header__.html > přidat do menu odkaz na tlačítko pro skrývání sidebaru
• users/views/ > vytvořit soubory pro části kodu zpracovávající vzhled stránky se sidebarem a bez něj
• users/views/update_menu_state.py > připsat include pro kod pro změnu vzhledu se sidebarem a bez něj s požadavkem na obnovení stránky
• templates/0_base/05__body_scripts__.html > připsat do scriptu pro postranní panely vyřízení požadavku na obnovení stránky
• templates/3_articles/ > vytvořit soubor 32__articles_visibility__.html a vložit do něj kod pro počet článků na řádek pro sidebar a bez něj
• templates/3_articles/32__articles__.html přepsat kod pro zobrazení počtu článků na řádek
• articles/views/article_list.py . smazat hodnotu paginate_by a nahradit ji metodou get_paginate_by
###
Dodatečná úprava zobrazení postranních panelů
###
Pozicování bočních panelů
• users/views/ > soubor update_menu_state.py rozdělit na user_sidebar_appearance.py pro kod pro skrývání panelů a user_sidebar_moovments.py pro jejich pohyb
• main/urls.py . smazat cestu k update_menu_state a přidat cesty k user_sidebar_moovments a user_sidebar_appearance
• users/models.py > do modelu pro OrderedBooleanField přidat pole pro hash a do modelu pro costumuser přidat metody pro posun hodnoty pořadí
• articles/views/article_common_contex_mixin.py > připsat kod pro řazení panelů
• templates > přizpůsobit všechny šablony, kterých se změna týká
###
Navigační panel pro kategorie a jeho skrývání
• users/models.py . připsat boolean pole pro navigační panel sidebar_category_navigation
$ python manage.py makemigrations
$ python manage.py migrate
• users/views/user_sidebar_appereance.py > zapsat kod pro odchytávání a zpracování tlačítka
• articles/views/article_common_contex_mixin.py > dopsat kod i pro nepřihlášeného uživatele
templates/3_artisles/31__page_title__.html > Připsat kod pro zobrazování a skrývání panelu
templates/2_main/_sidebars/__category__.html > přidat tlačítko pro skrývání panelu
###
Search sidebar vzhled a zaznamenání pozice
• users/models.py > připsat boolean pole pro vyklápěcí nabídku pro pole search
$ python manage.py makemigrations
$ python manage.py migrate
• users/views/user_sidebar_appearance.py > připsat kod pro zaznamenávání pozice vyklápěcí nabídky
• templates/2_main/_sidebar/ > vytvořit složku _search
• templates/2_main/_sidebar/_search/ > vytvořit soubor pro vyklápěci nabídku a tlačítko vyklápěcí nabídky
• templates/2_main/_sidebar/__search__.html > a zapsat do něj kod pro tlačítko a nabídku
###
Search sidebar funkčnost
• articles/views/search.py > Zapsat kod pro získání dat z pole pro vyhledávání a jejich následné zpracování
• articles/views/article_common_contex_mixin.py > Přidat výpis všech autorů pro vyhledávací pole autora
• templates/2_main/_sidebar/_search/__search_dropdown_menu__.html > Připsat id k jednotlivým polím + přepsat kod pro vybrání autora
• templates/2_main/_sidebar/__search__.html > Připsat id k vyhledávacímu poli
###
Nastavení pro zobrazení vyhledávacího panelu z tlačítka navigační lišty
• templates/0_base/_header/ > vytvořit složku pro vnitřní obsah vyskakujícího vyhledávacího pole _search_popup
• templates/0_base/_header/_search_popup > vytvořit soubor __input_field__.html a přepsat sem příslušný kod
• templates/0_base/_header/_search_popup > vytvořit soubor __subbmit_button__.html a přepsat sem příslušný kod
• templates/0_base/_header/_search_popup > vytvořit soubor __checkboxes__.html a přepsat sem příslušný kod
• templates/0_base/_header/_search_popup > vytvořit soubor __dates__.html a přepsat sem příslušný kod
• templates/0_base/_header/_search_popup > vytvořit soubor __author__.html a přepsat sem příslušný kod
• templates/0_base/_header/_f__search_popup__.html > přepsat kod vzhledem k nově vytvořeným souborům
###
Indexování:
$ pip instalace Whoosh
• articles/ > vytvořit soubor schema.py a zapsat do něj kod pro schema a další metody spojené s indexací
• main/settings.py > definovat cestu ke složce indexu INDEX_DIRECTORY
• articles/views/search.py > přepsat kod aby zohlednoval vyhledávání v schématu
$ pip install python-dateutil (Zpracování indexu datumu)
• articles/models/article.py > přidat do metody save indexování článku
• articles/models/article_author.py > přidat do metody save indexování jméno autora při jeho změně
###
Zpráva postranního panelu
• users/models.py > odebrat kod pro nastavení postranního panelu
$ python manage.py makemigrations
$ python manage.py migrate
• users/ > vytvořit soubor user_settings_mixin.py a zapsat kod pro nastavení postranního panelu
• users/models.py > importovat a připsat mixin třídu
$ python manage.py makemigrations
$ python manage.py migrate
• articles/views/article_common_contex_mixin.py > přepsat kod pro získání pořadí postranních panelů
• users/views/user_sidebar_appearance.py > oprava kodu aby využíval metody z user_settings_mixin.py
• users/views/user_sidebar_movements.py > oprava kodu aby využíval metody z user_settings_mixin.py
• templates/ > přispůsobení kodu novím podmínkám
###
Oprava hledání podle datumu
• main/articles/views/search.py > opravit pořadí hledání podle data před a po
###
Změna vyhledávání podle Authora
• articles/models/article.py > přidat pole pro datum publikování a do metody save přidat kod pro jeho zápis
$ python manage.py makemigrations
$ python manage.py migrate
• articles/schema.py > připsat pole pro indexaci a změnit indexace na ID tam kde to jde
• articles/models/article_author.py > odebrat kod pro změnu jména autora při jeho změně - nyní je autor evidován dle ID
• articles/views/search.py > přepsat kod pro vyhledávání dle autora
###
Nastavení přepínání mezi navigací pro kategorie a zobrazení bez ní
• articles/models/article_category.py > dopsat třídní metody pro získávání kategorií
• articles/views/article_list.py > přepsat kod pro zobrazení kategorií
• users/views/user_sidebar_movements.py > dopsat kod pro skrývání a zobrazování navigace pro kategorie
• templates/ > přispůsobení kodu novím podmínkám
###
Nastavení navigace pro tagy
• articles/views/article_list.py > dopsání logiky pro zobrazení tagů
• articles/schema.py > připsání metody pro hledání dle tagů
• main/urls.py > připsat URL pro hledání příbuzných tagů
• templates/2_main/_sidebars/__tags__.html > dopsání kodu pro nabídku zobrazení záložek pro tagy
• templates/3_articles/31__page_title__.html > dopsání kodu pro tagy
• users/views/user_sidebar_movements.py > připsat kod pro zobrazení a skrytí navigace pro tagy
• users/user_settings_mixin.pynahrazení definování property dynamickým přidáním vlastností na základě defaultních hodnot
###
Dotažení nastavení navigací ve vyhledávání a na stránkách s více články
• main/urls.py > připsat URL pro zobrazení navigecí i na stránkách s více články
• articles/ > vytvořit složku schema_search > přetahat sem všechny metody z pohledu search.py a udělat z nich funkce
• articles/views/search.py > úprava kodu
• articles/views/article_list.py > úprava kodu
• templates/3_articles/31__page_title__.html > dopsání kodu pro tagy
• templates/3_articles/32__articles__.html > dopsání kodu pro tagy
• templates/3_articles/_page_title/__category__.html > přejmenovat na __category_result_page__.html + úprava kodu
• templates/3_articles/_page_title/__search_result__.html > přejmenovat na __search_result_page__.html + úprava kodu
• templates/3_articles/_page_title/ > vytvoření souboru __tag_result_page__.html + dopsání kodu pro tagy
• articles/ > vytvořit složku schema_methods > přetahat sem všechny metody z schématu a udělat z nich funkce
• articles/models/article.py > úprava kodu
• articles/models/article_author.py > úprava kodu
###
Dotažení funkcionality skrývání a zobrazování nabídek postranních panelů
• users/user_settings_mixin.py > dopsat pole pro skrývání nabídky kategorií a tagů
• templates > v nabídce pro navigaci stránky přidat zobrazení navigace pro kategorie a podobné čláánky
• templates > v bočních panelech přepsat kod a nastavit skrývání nabídky pro kategorie a navigace
• templates > přepsat script pro zachytávání tlačítek tak, aby měnil i jejich text
• templates > předpříprava výklopné nabídky v horní liště navigace
###
Dotažení pohybu a nastavení panelů postranní nabídky a navigace
• users/views/user_sidebar_movements.py > zjednodušení kodu pro podmínku mezi posunem a vzhledem
• templates > úprava příslušných částí kodu
###
Responzivní chování článků a tlačítka menu
• templates > úprava příslušných částí kodu pro správné responzivní chování zobrazení článků
• templates > zobrazování a skrývání položek v nabídce menu
###
Nastavení postranního panelu pro nepřihlášeného uživatele
• users > anonymus_user_settings.py > Zapsat kod pro AnonymousUserSettingsMiddleware a AnonymousUserWithSettings
• main/settings.py > přidat do MIDDLEWARE vytvořenou třídu a nastavení pro Session
• users/views/user_sidebar_appearance.py > upravit kod, aby bral v úvahu i nepřihlášeného uživatele
• users/views/user_sidebar_movements.py > upravit kod, aby bral v úvahu i nepřihlášeného uživatele
• articles/views/article_common_contex_mixin.py > oprava části kodu pro zobrazení bočního panelu tak, aby fungovali i pro nepřihlášeného uživatele
• articles/views/article_list.py > oprava části kodu pro zobrazení bočního panelu tak, aby fungovali i pro nepřihlášeného uživatele
• articles/views/search.py > oprava části kodu pro zobrazení bočního panelu tak, aby fungovali i pro nepřihlášeného uživatele
• templates/0_base/ > oprava všech části kodu pro zobrazení bočního panelu tak, aby fungovali i pro nepřihlášeného uživatele
• templates/2_main/ > oprava všech části kodu pro zobrazení bočního panelu tak, aby fungovali i pro nepřihlášeného uživatele
• templates/3_articles/ > oprava všech části kodu pro zobrazení bočního panelu tak, aby fungovali i pro nepřihlášeného uživatele
###
Vytvoření aplikace pro správu domácí stránky superuživatelem
$ python manage.py startapp homepage
• main/settings.py > dopsat aplikaci do INSTALLED_APPS
• homepage/ > vytvořit složku models s initem a smazat soubor models.py
• homepage/models/ > vytvořit modely pro jednotlivé sekce a zapsat je do initu
$ python manage.py makemigrations
$ python manage.py migrate
• homepage/ > vytvořit složku views s initem a smazat soubor views.py
• homepage/views > přesunout sem soubor pro hopepage view z articles/views
Rozdělení urls.py na jednotlivé aplikace
• homepage/ > vytvořit soubor urls.py a přetahat sem kod pro adresy z této sekce
• articles/ > vytvořit soubor urls.py a přetahat sem kod pro adresy z této sekce
• users/ > vytvořit soubor urls.py a přetahat sem kod pro adresy z této sekce
• main/urls.py > odebrat přetažené kody a zapsat include
Vytvoření prvního formuláře a jeho aplikace do stránky
• homepage > vytvořit složku forms s initem
• homepage/forms/ > založit soubor pro formulář pro hero sekci
• homepage/views/ > vytvořit soubor pro zpracování tohoto formuláře
• homepage/views/homepage.py > Připsat kod pro přesměrování na stránku editace
• homepage/urls.py > připsat adresu pro zpracování formuláře a adresu pro úpravu homepage
• templates/ > upravit kod pro hero sekci a zobrazení tlačítka pro úpravu homepage
###
Dokončení aplikace pro správu domácí stránky superuživatelem
• homepage/models/ > přidání modelu singleton pro jedinou instanci modelů a následná úprava všech modelů
• homepage/forms/ > dopsat formuláře pro všechny ostatní sekce
• homepage/views/ > dopsat pohledy pro ostatní sekce
• homepage/views/ > vytvořit základní třídu BaseHomePageView a kod pro home page rozdělit na dvě části - pro pohled na stránku a pro její editaci
• homepage/urls.py > připsat všechny ostatní pohedy pro úpravu sekcí
• templates/1_home/ > přepsat kod a upravit aby byl lépe čitelný a odpovídal novému nastavení
• templates/0_base/_footer/ > přepsat kod a upravit aby byl lépe čitelný a odpovídal novému nastavení
###
Přepsání footeru na slovníky
• homepage/models/footer_section.py > přepsání polí databáze
• homepage/models/ > přidání souboru pro defaultní hodnoty patičky
• homepage/forms/footer_section_form.py > přepsání kodu aby odpovídal novým podmínkám
• homepage/views/edi_footer_section.py > přepsání kodu aby odpovídal novým podmínkám
• homepage/views/ > vytvořit soubor save_footer_data.py pro logiku ukládání dat do modelu pro footer
• templates/0_base/_footer/ > přepsání kodu aby odpovídal novým podmínkám
Změna logiky pohledu pro home page
• homepage/views/ > vytvořit soubor home_page_mixin.py pro vytvoření dat mixinů pro home page
• homepage/views/ > vytvořit soubor home_page_view.py pro nastavení zobrazení domácí stránky
• homepage/views/ > smazání původních souborů pro domácí stránku
Dopsání popisků
• homepage/models/ > dopsání a úprava popisků u všech souborů
• homepage/forms/ > dopsání a úprava popisků u všech souborů
• homepage/views/ > dopsání a úprava popisků u všech souborů
###
Úprava modelu Gallery aby namísto odkazů na model Article používal slovník s daty
• homepage/models/gallery_section.py > přepsání polí z models.ForeignKey na JSONField
$ python manage.py makemigrations
$ python manage.py migrate
• homepage/models/ > vytvoření souboru gallery_section_default.py a zapsat defaultní hodnoty pro tuto sekci
• homepage/forms/gallery_section_form.py > přepsání kodu tak aby pracoval se slovníky
• homepage/views/edit_gallery_section.py > přepsání kodu tak aby pracoval se slovníky
###
Dodatečné úpravy pro Home Page
• articles/views/article_common_contex_mixin.py > připsat context pro footer
• homepage/views/ > vytvoření nového souboru home_page_view_edit.py pro editaci domácí stránky a zapsat kod pro pohled pro editaci
• homepage/views/home_page_view.py > odmazat část pro editaci a jen ponechat část pro zobrazení (pro snížení zátěže)
• homepage/urls.py > dopsat nový pohled pro editaci stránky
###
Pročištění projektu od nepoužívaného JS a přepis vlastních JS z šablon do samostatných souborů
###
Závěrečná restrukturizace projektu + doplnění vysvětlivek a popisů.
###