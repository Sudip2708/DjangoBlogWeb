1) Přetažení html do Django
###
• Založit GitHub Repository
• Natáhnout do PyCharm
• Jít na: https://bootstrapious.com/free-templates
• Vybrat podklad a stáhnout do kompu
(v mém případě: https://bootstrapious.com/p/bootstrap-blog)
• Překopírovat složky ze zipu do kořenového adresáře
###
Pokud mám špatné venv:
Deaktivace: $ deactivate
Instalace virtualenv: $ pip install virtualenv
Vytvoření venv: $ virtualenv venv
Aktivace venv: $ venv\Scripts\activate
###
• Aktualizace pip: $ python -m pip install --upgrade pip
• Instalace Django: $ pip install django
• Založit projekt: $ django-admin startproject blog
###
• Uvnitř kořenové složky 'blog' vytvořit složku 'static'
• Přesunout dovnitř: složky: css, img, js, vendor, a případně další statiku (fonts, icons)
• Uvnitř kořenové složky 'blog' vytvořit složku 'templates'
• Přesunout dovnitř html a textové soubory (zbylé z webové šablony)
###
• Ve složce projektu 'blog' otevřít settings.py
• Nastavit cestu k složce templates: TEMPLATES... 'DIRS': [BASE_DIR / 'templates']
• Dopsat pod statiku odkazy na: MEDIA_URL, STATICFILES_DIRS, STATIC_ROOT, MEDIA_ROOT
• Ve složce projektu 'blog' otevřít urls.py
• Importovat settings a static: from django.conf import settings, from django.conf.urls.static import static
• Zapsat kód pro zpřístupnění media a statiky z webu (když jsme v debug módu): if settings.DEBUG:...
• V terminálu se přesunout do aplikace: $ cd blog
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
###
Úprava html souborů:
• vytvořit base.html, pro základní strukturu
• rozebrat index.html na základní společné prvky: head.html, header.html, footer.html, scripts.html
• Smazat hlavičku a skripty i na dalších stránkách (blog.html, post.html)
• Dopast do stránek {% block content %} a {% endblock content %}
###
• Ve složce projektu 'blog' vytvořit soubor views.py a definovat pohled index a blog
• Ve složce projektu 'blog' otevřít urls.py a importovat vytvořené pohledy: from.views import index, blog
• Zapsat pohledy do urlpatterns
• Zpustit vývojové prostředí a podívat se zda se načetl nestylizovaný obsah webu: $ python manage.py runserver
###
• Otevřít soubor head.html, scripts.html, index.html, blog.html, post.html a na úvod dopsat: {% load static %}
• V souborech head.html a scripts.html, ke každému lokálnímu odkazu herf do uvozovek dopsat {% static '' %} a do apostrofů dát původní obsah
• To samé udělat pro všechny obrázky (src="img) v souborech index.html, blog.html, post.html.
• V settings.py zkontrolovat a případně přepsat následujíc: STATICFILES_DIRS = [BASE_DIR / 'static'], STATIC_ROOT = BASE_DIR.parent / 'static'
• Zpustit příkaz: $ python manage.py collectstatic
• Zpustit vývojový server
• Na stránce přepnout do konzole a zkontrolovat zda tu nejsou nějaké nenačtené soubory
###
2) Zprovoznění index.html
###
• Otevřít header.html a opravit odkazy v navigaci stránky (např. href="blog.html" na href="/blog")
• Vytvořit nový modul pro příspěvky post: $ python manage.py startapp posts
• Podívat se na stránku a zjistit, co vše budeme potřebovat za pole pro databázy
• Otevřít blog/settings.py a zapsat do INSTALLED_APPS 'posts',
###
• Nainstalovat Pillow pro práci s obrázky: $ pip install pillow
• Nainstalovat knihovna TinyMCE pro práci s obsahem webu: $ pip install django-tinymce
• Do blog/settings.py a zapsat do INSTALLED_APPS 'tinymce',
• Do posts/models.py importovat HTMLField, get_user_model a zapsat databázové modely:
• Post(models.Model) pro příspěvky - pole: title, overview, timestamp, comment_count, author (ForeignKey)
• Author(models.Model) pro autora příspěvků - pole: user, profile_picture
• Category(models.Model) pro kategorie příspěvků - pole: title
Vytvoření souboru s instalovanými balíčky: $ pip freeze > requirements.txt
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
###
• Z blog/views.py překopírovat obast do posts/views.py a blog/views.py smazat
• V blog/urls.py přepsat from .views na from posts.views
+ Dopsání popisků
###
• V posts/models dopsat do Post(models.Model) pro příspěvky - pole: featured (pro učení příspěvku pro hlavní stránku)
• Natsavit defaoultní hodnotu na False: featured = models.BooleanField(default=False)
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
• Vytvoření superuser: $ python manage.py createsuperuser
• V posts/admin.py importovat a registrovat zobrazení vytvořených tabulek: admin.site.register()
• Přihlásit se na http://127.0.0.1:8000/admin/ a zapsat pár příspěvků
###
• Do posts/views.py importovat třídu Post: from .models import Post
• Vyfiltrovat příspěvky s které mají pole featured nastaveno na True: article_featured = Post.objects.filter(featured=True)
• Vyfiltrovat nejnovější příspěvky: article_latest = Post.objects.order_by('-timestamp')[0:3]
• Vytvořit slovník context a přidat výsledky obou filtrování
• Zapsat vyfiltrovaná data do HTML odpovědi: return render(request, 'index.html', context)
• Otevřít templates/index.html, najít část se zobrazenými články a namísto opakování HTML kódu napsata jinja2 příkazy pro zobrazení dat.
###
• Vytvoření modulu pro zadání emailu pro odebírání novinek:
• Vtvořit novou aplikaci pro uchovávání emailů: $ python manage.py startapp marketing
• Do blog/settings.py a zapsat do INSTALLED_APPS 'marketing',
• Otevřít marketing/models.py a vytvořit tabulku Signup(models.Model) se sloupci: email, timestamp
• Otevřít marketing/admin.py a registrovat zobrazení vytvořených tabulek v admin sekci
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
• Otevřít posts/views a importovat Signup: from marketing.models import Signup
• A do index dopsat podmínku pro požadavek typu POST (if request.method == "POST") a příslušný kód pro uložení emailu
• Otevřít templates/index.html, najít část z formulářem pro přihlášení se k odběru
• Příkaz <form action="#">, přepsat na <form action="." method="POST">
• A pod něj vložit token: {% csrf_token %}
###
• Vytvoření kódu pro stránku blog se všemi příspěvky
• Otevřít post/views.py a k definici def blog(request) připsat:
• Kód pro vyfiltrování všech příspěvků: articles = Post.objects.filter()
• A přidat ho do slovníku context a ten vložit do rendru stránky
• Otevřít templates/blog.html a sekci se články přepsat do jednoho v jinja2 kódu
###
• Paginace:
• Otevřít post/views.py a zapsat import: from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
• Zapsat kód pro stránkování
• Otevřít templates/blog.html a zapsat jinja2 kód pro stránkování
###
Boční panel - nejnovější příspěvky
• V templates vytvořit nový soubor sidebar.html
• Otevřít templates/blog.html a překopírovat do templates/sidebar.html část kódu pro boční panel <aside>
• V templates/blog.html dopsat jinja2 odkaz na natežení obsahu z templates/sidebar.html {% include 'sidebar.html' %}
• Otevřít post/views.py a k definici def blog(request) připsat:
• Kód pro vyfiltrování kategorií: get_category_count()
• Kód pro vyfiltrování nejnovějších příspěvků: Post.objects.order_by('-timestamp')[:3]
• Přidat obě položky do slovníku context, vloženého do rendru stránky
• Otevřít blog/urls.py a do urlpatterns dopsat k položkám blog a post hodnotu name: name='post-list', name='post-detail'
• Otevřít posts/views.py a importovat reverse: from django.urls import reverse
• Dopsat funkci pro získání URL adresy: get_absolute_url(self) == return reverse('post-detail', kwargs={'pk': self.pk})
###
Boční panel - kategorie
• Otevřít posts/views.py a vytvoříme funkci get_category_count()
• Vytvoříme dotaz, pro vytažení všech kategorií a jejich zpočítání: queryset = Post.objects.values('categories__title').annotate(Count('categories__title'))
• Do def blog(request) dopíšeme category_count = get_category_count() a přidáme do context
• V templates/sidebar.html přepíšeme kód (za pomoci jinja2) aby použil dodané hodnoty
###
Boční panel - hledání (pouze v nadpisech a popisu článků)
• Vytvořit v templates soubor search_result.html + zapsat kód
• Otevřít posts/views.py a vytvoříme pohled pro výsledky hledání:  def search(request)
• Zapsat kód pro vyfiltrování obsahu dle zadaného textu
• Otevřít blog/urls.py importovat search, a do urlpatterns připsat path('search/', search, name='search'),
• Otevřít templates/sidebar.html a přepsat kód, a do form přidat action="{% url 'search' %}"
###
Pole s tagy budu dělat až nakonec (nebyli součástí tutotiálu)
###
Stránka s příspěvkem
• Otevřít templates/post.html odstranit část s bočním panelem a připsat: a přepsat kód
{% include 'sidebar.html' with most_recent_articles=most_recent_articles category_count=category_count %}
• Odebereme i část kódu pro vykreslení těla příspěvku (tato část je zde jen na ukázku, vzhled článku bude přes TinyMCE)
(
• Instalace TinyMCE: $ pip install django-tinymce
• Přidat tinymce do INSTALLED_APPS v settings.py: 'tinymce'
• A přepsat kód pro nastavení dle: https://django-tinymce.readthedocs.io/en/latest/installation.html
• Do blog/urls.py inportovat include a do urlpatterns: path('tinymce/', include('tinymce.urls')),
• Do posts/models.py importovat HTMLField: from tinymce.models import HTMLField
• A pole contens (pro obsah článku) nastavit na HTMLField()
• Ve složce posts vytvořit nový soubor forms.py a zapsat kód pro formulář
)
Otevřeme posts/views importoujeme get_object_or_404
A dopíšeme kód do post(request, id) pro vyhledání příspěvku: post = get_object_or_404(Post, id=id) a zapíšeme do rendru stránky.
Otevřeme templates/post.html a přepíšeme část s článkem za pomoci jinja2 kódu
###
Předešlý a další článek:
• Otevřít posts/model.py a dopsat pole i s definicí pro previous_post a next_post
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
• Otevřít web v admin sekci a přidat k článkům odkaz na předchozí a minulý
• Otevřít templates/post.html a přepsat kód pro předcházející a následující článek.
###
Komentáře:
• Otevřít posts/models.py a zapsat třídu pro tabulku pro příspěvky Comment(models.Model) s poly: user(fk), post(fk), timestamp, content
• Otevřít posts/admin.py a importovat třídu Comment a zaregistrovat: admin.site.register(Comment)
• Otevřít posts/forms.py a importovat třídu Comment a napsat model pro formulář
• Otevřít posts/views.py a importovat třídu CommentForm a zapsat kód
• Otevřít templates/post.html a přepsat kód pro komentáře
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
###
Zprovoznění vyhledávání
• Otevřít templates/header.html a z templates/sidebar.html překopírovat části kódu pro vyhledávání
###
Přidání a úprava příspěvku
• Otevřít templates/post.html a připsat odkazy pro zobrazení tlačítka pro úpravu a smazání článku
• Otevřít posts/models.py a do Post(models.Model) přidat funkci pro vytvoření, úpravu a smazání příspěvku
• Otevřít posts/views.py importovat PostForm a Author, a zapsat kód pro tyto pohledy
• Otevřít blog/urls.py importovat tyto pohledy a dopsat do urlpatterns cestu k nim
• Instalovat crispy-forms: $ pip install django-crispy-forms (https://django-crispy-forms.readthedocs.io/en/latest/install.html)
• Instalovat podporu pro Bootstrap 5: $ pip install crispy-bootstrap5 (https://github.com/django-crispy-forms/crispy-bootstrap5)
• Otevřít blog/settings.py a do INSTALLED_APPS zapsat: 'crispy_forms' a 'crispy_bootstrap5'
• A pod INSTALLED_APPS zapsat: CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5", CRISPY_TEMPLATE_PACK = "bootstrap5"
• V složce templates vytvožit soubory: post_create.html a zapsat kód
• Otevřít templates/post.html a připsat odkazy pro zobrazení odkazu pro úpravu článku
> dodělat mazání příspěvku < (s potvrzením)
###
Nastavení počítání zobrazení a počítání komentů
• Otevřít posts/models.py a zapsat třídy PostView(models.Model)
• A do Post(models.Model)) připsat @property: def view_count(self) a comment_count(self)
• Otevřít posts/views.py importovat PostView
• A do post() připsat PostView.objects.get_or_create(user=request.user, post=post)
• Vytvořit soubor pro migraci: $ python manage.py makemigrations
• Migrovat projekt: $ python manage.py migrate
• Otevřít posts/admin.py a importovat třídu PostView a zaregistrovat ji
Otevřít index.html, blog.html, post.html, sidebar.html a dopsat {{ post.comment_count }} a {{ post.view_count }}
> Změna 'article' na 'post' pro zjednodušení kódu <
###
Změna virtuálního prostředí
• (Nějak se mi na projek v počátku navázalo virtuální prostředí z jiného projektu a ny ní našel čas to napravit)
• Deaktivovat virtuální prostředí: $ deactivate
• Aktivace venv které jsem si vytvořil a v kterém dělám projekt: $ venv\Scripts\activate
• Natažení requirements.txt: $ pip freeze requirements.txt
• Vypnout / zapnout PyCharm
• Jít v PyCharm do File > Settings > Projekt > Projekt interpreter a vytvořit (přidat) nový interpreter
• Doinstalovat requirements.txt: $ pip install -r requirements.txt
###
Instalace a základní nastavení Django Allauth (bez možnosti přihlášení prostřednictvím sociálních sítí)
• Nainstalovat aplikaci: $ pip install django-allauth
• Zápis instalace do requirements.txt: $ pip freeze requirements.txt
• Otevřít blog/settings.py a do INSTALLED_APPS přidat: 'allauth', 'allauth.account'
• Zkontrolovat jestli v TEMPLATES je uvedeno: 'django.template.context_processors.request'
• Přidat nastavení AUTHENTICATION_BACKENDS
• Do MIDDLEWARE přidat řádek: "allauth.account.middleware.AccountMiddleware",
• Otevřít blog/urls.py a do urlpatterns připsat: path('accounts/', include('allauth.urls')),
• Migrovat projekt: $ python manage.py migrate
###
Zpráva uživatelů v Django Allauth (bez možnosti přihlášení prostřednictvím sociálních sítí)
•


