$ pip3 install django
$ django-admin startproject my_blog
$ cd .\my_blog\
$ python manage.py makemigrations
$ python manage.py migrate
$ python manage.py createsuperuser
((((((((((((((((((((((((((((((((
deaktivace virtuálního prostředí:
\blog_app>deactivate
aktivace virtuálního prostředí:
Open pycharm --> Go to Settings --> Tools --> Terminal.
Change the Shell Path to C:\Windows\system32\cmd.exe from PS.
Check the Activate virtualenv checkbox.
Hit apply and open new terminal.
))))))))))))))))))))))))))))))))
$ python manage.py dumpdata > backup.json
$ python manage.py startapp blog
Do my_blog/settings.py: INSTALLED_APPS = ['blog.apps.BlogConfig',]
Do blog/models.py: Zapsat kód pro model tabulky
$ python manage.py makemigrations blog
$ python manage.py migrate
Do blog/admin.py: Zapsat kód zpobrazení tabulky článků v sekci admin
Do blog/models.py: Zapsat kód pro rozšířením základní Manager třídy
Do blog/views.py: Importujte model článku + vytvořit metodu pro pohled
V blog/ vytvořit soubor urls.py a zapsat cestu
Zahrnout soubor blog/urls.py do hlavního souboru urls.py
V blog/ vytvořit složku templates a uvnitř ní složku blog
V blog/templates/blog vytvořit soubor base.html
V blog/ vytvořit složku static a uvnitř ní soubor style.css
Vrácení html šablony v metodě list_of_articles()
Vytvoření souboru se list.html v adresáři templates/blog
# Do my_blog settings.py přidat: import os + TEMPLATES = 'DIRS': [os.path.join(BASE_DIR, 'templates')],
Vytvoření metody v souboru blog/views.py
Vytvořte soubor detail.html v adresáři blog/templates/blog
Vytvoření vzoru adresy URL pro podrobnosti článku
Upravit soubor blog/templates/blog/list.html
#######################################
Vytvořerní adresy odkazů na články:
Vytvořte metodu pro získání kanonické adresy URL článku
Vytvořte metodu, která vrátí kanonickou adresu URL objektu article
Úprava modelu článku
Úprava pohledů
Úprava adresy URL podrobností článku
Změna adresy URL podrobností o článku v blog/templates/blog/list.html
$ python manage.py makemigrations blog
$ python manage.py migrate
#######################################
Paginátor:
Importujte stránkovač do blog/views.py
Přidat stránkování se 3 články na stránku
Vytvoření šablony stránkování
Zahrňte šablonu stránkování do blog/template/blog/list.html souboru.
Opravte chybu PageNotInteger v blogu / zobrazeních.py
#######################################
Vytvořte model komentářů v blogu/modelech.py
$ python manage.py makemigrations blog
$ python manage.py migrate
Přidat komentář do administrátorského panelu
Vytvoření formuláře pro komentáře
Vytvoření formuláře zobrazení pro komentář
Vytvoření vzoru url pro metodu comment_for_article()
Přidávání komentářů na stránku s podrobnostmi o článku
Přidání celkového počtu komentářů do šablony podrobností článku
Zobrazit všechny komentáře vztahující se k šabloně detailu článku
Přidejte formulář komentáře do šablony detailu článku
#######################################
Přidání funkce tagování do článku:
$ pip3 install django-taggit
Přidejte aplikaci taggit django do souboru nastavení django
Přidejte TaggableManager do souboru blog/models.py
$ python manage.py makemigrations blog
$ python manage.py migrate
Zobrazení štítků v článcích v list.html
Zobrazit všechny články na základě konkrétního štítku v blog/views.py
Vytvoření vzoru adresy URL pro články podle značky v urls.py
Upravit soubor blog/templates/list.html
#######################################
Získání podobných článků pomocí značek:
Otevřete soubor blog/views.py a importujte počet z django.db.models.
Načtěte podobné články v metodě article_details() v souboru blog/views.py
Zobrazit podobné články v blog/templates/blog/detail.html
#######################################
Zobrazení nejnovějších článků v postranním panelu:
Vytvořme tedy adresář templatetags, uvnitř kterého vytvoříme soubory __init__.py a article_tags.py.
Vytvoření jednoduché značky v souboru article_tags.py
Vložte {% load article_tags %} do base.html.
Zobrazení celkového počtu publikovaných článků v blog/templates/base.html
Vytvořte značku pro zobrazení nejnovějších článků v article_tags.py souboru
Vytvořte soubor latest_articles.html ve složce blog/templates/blog
Volání vlastních značek v base.html: {% show_latest_articles 3 %}
#######################################
Vytvoření vlastní značky pro nejvíce komentované články:
Otevřete soubor blog/templatetags/article_tags.py a vytvořte jednoduchý tag.
Vytvořte soubor most_commented_articles.html v adresáři templates/blog a iterujte objekt most_commented_articles.
Zavolejte funkci show_most_commented_article() v blog/templates/base.html.
#######################################
Přidání souboru Sitemap na web blogu v Djangu:
Otevřete soubor nastavení Django a do seznamu INSTALLED_APPS přidejte SITE_ID = 1 a "django.contrib.sites" a "django.contrib.sitemaps".
spustit příkaz migrate, který vytvoří tabulku v naší databázi.
$ python manage.py migrate
Vytvořte soubor s názvem sitemaps.py v adresáři blogu
Vytvořte třídu s názvem BlogSitemap
Přidejte adresu URL souboru Sitemap do souboru hlavního urls.py
Otevřete soubor blog/models.py a změňte název metody get_canonical_url() na get_absolute_url().
Změňte tedy název metody globálně v projektu na všech výskytech.
Změna názvu domény v souboru Sitemap
Přihlášení do administrace django > Sites
Změňte example.com na localhost:8000 a klikněte na uložit.
stiskněte Ctrl + c. Pak znovu spusťte vývojový server
Nyní se mapa stránek.xml zobrazuje dobře.
http://127.0.0.1:8000/sitemap.xml
#######################################
Implementace funkce vyhledávání na webu blogu:
otevřete soubor blog/views.py a vytvořte metodu nazvanou article_search():
def article_search(request):
    query = 'si'
    results = []
    results = Article.objects.raw("SELECT * FROM blog_article WHERE title LIKE %s OR body LIKE %s", [f'%{query}%', f'%{query}%'])
    print(results)
    print("#############")
    for result in results:
        print(result)
        pass
    return HttpResponse("Working")
    pass
Vytvořte vzor adresy URL v souboru blog/urls.py pro vyhledávání článků:
path('search/', views.article_search, name='article_search')
V DB beowseru:
-- Vytvoření virtuální tabulky pro plnétextové vyhledávání
CREATE VIRTUAL TABLE blog_article_search USING FTS4 (title, body);
-- Naplnění virtuální tabulky daty z původní tabulky
INSERT INTO blog_article_search(title, body)
SELECT title, body FROM blog_article;
Do models.py přidat class ArticleSearch
$ python manage.py makemigrations blog
$ python manage.py migrate
Adresa pro zobrazení, že vše proběho ok:
http://127.0.0.1:8000/blog/search/
###############################################

Vytvoření nové aplikace pro registraci uživatelů:
$ python manage.py startapp users

Přidání aplikace do seting:
1) Ve složce projektu kliknout na settings.py
2) Najít INSTALLED_APPS
3) Dopsat: 'users.apps.UsersConfig', (nezapomenout na čárku)

Nastavit pohled:
1) Otevřít ve složce users soubor views.py
2) Zapsat pohled

Vytvoření stránek:
1) Vytvořit složku templates
2) Uvnitř ní vytvořit složku users
3) Uvnitř vytvořit html soubor pro stránku

Zapsat aplikaci do projektu:
1) Otevřít Django_project a v něm soubor urls.py
2) Dopsat:
from users import views as user_views
path('register/', user_views.register, name='register'),

Doinstalovat Crispy Forms a bootstrap4:
$ pip3 install django-crispy-forms
$ pip3 install crispy-bootstrap4

Přidání Crispy do settings:
1) Ve složce projektu kliknout na settings.py
2) Najít INSTALLED_APPS
3) Dopsat: 'crispy_forms', (nezapomenout na čárku)
4) Dopsat: 'crispy_bootstrap4', (nezapomenout na čárku)
5) Dojet úpně na konec stránky a dopsat: CRISPY_TEMPLATE_PACK = 'bootstrap4'

###############################################

Vytvoření možnosti přihlásit se:

###############################################

Vytvoření modelu pro uživatele s fotkou:
1) Upravit model.py
2) Nainstalovat pillow
$ pip3 install Pillow
3) Migrovat:
$ python manage.py makemigrations
$ python manage.py migrate
4) registrovat model v admin.py

###############################################

Úprava profilu + změna velikosti fotky:

###############################################



